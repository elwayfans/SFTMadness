AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sftMadness

  Sample SAM Template for sftMadness

Globals:
  Function:
    Timeout: 60
    MemorySize: 512
    Runtime: python3.12
    Architectures:
      - x86_64
    LoggingConfig:
      LogFormat: JSON

    Environment:
      Variables:
        #references (ref) environment / version
        ENV: !Ref Env

        #ref database parameters
        DB_NAME: !Ref DBName
        DB_HOST: !Ref DBHost
        DB_USER: !Ref DBUser
        DB_PASSWORD: !Sub '{{resolve:secretsmanager:arn:aws:secretsmanager:us-east-2:908027415563:secret:rds!db-f5f6a726-1663-469e-86a2-93fe3eda392d-fxeeeg:SecretString:password}}'
        DB_PORT: !Ref DBPort

        #ref cognito parameters
        COGNITO_USER_POOL_ID: !Ref UserPool
        COGNITO_CLIENT_ID: !Ref UserPoolClient

        #ref s3 bucket
        S3_BUCKET_NAME: !Ref FileStorageBucket
        S3_SCRAPED_BUCKET_NAME: !Ref ScrapedFileStorageBucket

        #ref ses parameters
        SES_SENDER_EMAIL: !Ref SESSenderEmail
        SES_DOMAIN: !Ref SESDomain
        SES_REGION: !Ref SESRegion
        SES_CONFIGURATION_SET: !Ref SESConfigurationSet

    #global dependencies
    Layers:
      - !Ref DependenciesLayer

    #global vpc configuration
    VpcConfig:
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup
      # all lambdas must run in private subnets
      SubnetIds:
        - !Select [0, !Split [",", !Ref PrivateSubnetIds]]
        - !Select [1, !Split [",", !Ref PrivateSubnetIds]]
        - !Select [2, !Split [",", !Ref PrivateSubnetIds]]
    
#referenced parameters initialization
Parameters:
  Env:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Environment
  DBName:
    Type: String
    Description: Database Name
  DBHost:
    Type: String
    Description: Database Host
  DBUser:
    Type: String
    Description: Database User
  DBPort:
    Type: Number
    Description: Database Port
  VpcId:
    Type: String
    Description: VPC Id
  InternetGatewayId:
    Type: String
    Description: Existing Internet Gateway Id
  PublicSubnetIds:
    Type: String
    Description: Public Subnet Ids
  PrivateSubnetIds:
    Type: String
    Description: Private Subnet Ids
  SESSenderEmail:
    Type: String
    Description: SES Sender Email
  SESDomain:
    Type: String
    Description: SES Domain
  SESRegion:
    Type: String
    Description: SES Region
  SESConfigurationSet:
    Type: String
    Description: SES Configuration Set
  CreateEmailIdentity:
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
    Description: Whether to create email identity

# Conditions for SES Configuration Set and Domain Identity
Conditions:
  CreateConfigSet: !Not [!Equals [!Ref SESConfigurationSet, ""]]
  VerifyDomain: !Not [!Equals [!Ref SESDomain, ""]]
  CreateEmailIdentity: !Equals [!Ref CreateEmailIdentity, "true"]

Resources:
  # creates the api gateway
  sft:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      # cors configuration
      BinaryMediaTypes:
        - '*/*'
        - 'image/*'
        - 'application/octet-stream'
      Cors:
        AllowMethods: "'POST, GET, OPTIONS, PUT, DELETE'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Access-Control-Allow-Origin,Accept,Origin'"
        AllowOrigin: "'*'"
        MaxAge: "'7200'"
        # AllowCredentials: true
      # authorizer configuration
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
            Identity:
              Header: Authorization
            Type: COGNITO_USER_POOLS

  # creates the lambda execution role
  # this role is used by all lambda functions
  # permissions and policies set for secretsAccess, cognitoAccess, rdsAccess, networkAccess, s3Access, sesAccess
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      # managed policies
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SecretsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                #access to the rds secret
                Resource: 
                  - !Sub 'arn:aws:secretsmanager:us-east-2:908027415563:secret:rds!db-f5f6a726-1663-469e-86a2-93fe3eda392d-fxeeeg'
        - PolicyName: CognitoAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement: 
              - Effect: Allow
                # cognito user pool permissions
                Action:
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminInitiateAuth
                  - cognito-idp:AdminSetUserPassword
                  - cognito-idp:AdminDeleteUser
                  - cognito-idp:AdminGetUser
                  - cognito-idp:AdminUpdateUserAttributes
                  - cognito-idp:DescribeUserPool
                  - cognito-idp:DescribeUserPoolClient
                  - cognito-idp:ListUsers
                  - cognito-idp:AdminUserGlobalSignOut
                Resource: 
                  - !GetAtt UserPool.Arn
                  - !Sub ${UserPool.Arn}/client/*
        - PolicyName: RDSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds-db:connect
                Resource: '*'
        - PolicyName: NetworkAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                # network permissions
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:AttachNetworkInterface
                  - ec2:DescribeInstances
                  - ec2:ModifyNetworkInterfaceAttribute
                Resource: '*'
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                # s3 bucket permissions
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource: !Sub 'arn:aws:s3:::${FileStorageBucket}/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Sub 'arn:aws:s3:::${FileStorageBucket}'
              - Effect: Allow
                # s3 bucket permissions
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource: !Sub 'arn:aws:s3:::${ScrapedFileStorageBucket}/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Sub 'arn:aws:s3:::${ScrapedFileStorageBucket}'
        - PolicyName: SESAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                # ses permissions
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: 
                  - !Sub 'arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/*'
                  # if config set is not created, allows creation here
                  - !If 
                    - CreateConfigSet
                    - !Sub 'arn:aws:ses:${AWS::Region}:${AWS::AccountId}:configuration-set/${SESConfigurationSet}'
                    - !Ref AWS::NoValue

  # nat gateway and eip for private subnet access
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Select [0, !Split [",", !Ref PublicSubnetIds]]

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # public and private route tables configuration
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VpcId

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGatewayId

  # only public subnets have internet access and are in the public route table
  # only private subnets have nat gateway access and are in the private route table
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Select [0, !Split [",", !Ref PublicSubnetIds]]
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Select [1, !Split [",", !Ref PublicSubnetIds]]
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Select [2, !Split [",", !Ref PublicSubnetIds]]
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VpcId

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Select [0, !Split [",", !Ref PrivateSubnetIds]]
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Select [1, !Split [",", !Ref PrivateSubnetIds]]
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Select [2, !Split [",", !Ref PrivateSubnetIds]]
      RouteTableId: !Ref PrivateRouteTable

  # security group for lambda functions
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda functions
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # layer for dependencies, all lambda functions use this layer
  DependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: sftMadnessDependencies
      Description: Dependencies for sftMadness
      ContentUri: ./
      CompatibleRuntimes:
        - python3.12
    Metadata:
      BuildMethod: python3.12

  # user pool and client configuration
  UserPool:
    Type: AWS::Cognito::UserPool
    # if stack is deleted, user pool is retained
    DeletionPolicy: Retain
    # if stack is updated, user pool is retained
    UpdateReplacePolicy: Retain
    Properties:
      UserPoolName: sftMadnessUserPool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      # email is the username attribute
      # email is auto-verified
      # email is required and mutable
      # password policy is enforced
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      Schema:
        - Name: email
          Required: true
          Mutable: true
          AttributeDataType: String

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: sftMadnessUserPoolClient
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      PreventUserExistenceErrors: ENABLED
      # client is allowed to use all oauth flows
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      # token validity is set to 60 minutes
      AccessTokenValidity: 60
      IdTokenValidity: 60
      RefreshTokenValidity: 30
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes
        RefreshToken: days

  # s3 bucket configuration for file storage
  FileStorageBucket:
    Type: AWS::S3::Bucket
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub 'sftmadness-files-${AWS::Region}-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedOrigins:
              - '*'
            MaxAge: 3600
  
  FileBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FileStorageBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowPresignedUrlAccess
            Effect: Allow
            Principal: '*'
            Action:
              - s3:GetObject
            Resource: !Sub ${FileStorageBucket.Arn}/*
            Condition:
              StringEquals:
                aws:PrincipalArn: !Ref AWS::AccountId

  # s3 bucket configuration for scrapedFile storage
  ScrapedFileStorageBucket:
    Type: AWS::S3::Bucket
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub 'sftmadness-scrapedfiles-${AWS::Region}-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedOrigins:
              - '*'
            MaxAge: 3600
  
  ScrapedFileBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ScrapedFileStorageBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowPresignedUrlAccess
            Effect: Allow
            Principal: '*'
            Action:
              - s3:GetObject
            Resource: !Sub ${ScrapedFileStorageBucket.Arn}/*
            Condition:
              StringEquals:
                aws:PrincipalArn: !Ref AWS::AccountId

  # email logging configuration
  EmailLoggingGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/ses/${AWS::StackName}"
      RetentionInDays: 14

  # email metrics configuration
  EmailMetricsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ses.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        # stored in cloudwatch
        - PolicyName: CloudWatchLogging
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                # cloudwatch logs permissions
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt EmailLoggingGroup.Arn

  # ses domain identity configuration
  SESDomainIdentity:
    # if stack is deleted, domain identity is retained
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    # creates the domain identity if it does not exist
    Condition: CreateEmailIdentity
    Type: AWS::SES::EmailIdentity
    Properties:
      EmailIdentity: !Ref SESSenderEmail
      # if there is no configuration set, uses the default
      ConfigurationSetAttributes:
        ConfigurationSetName: !If [CreateConfigSet, !Ref SESConfigurationSet, !Ref "AWS::NoValue"]
      DkimAttributes:
        SigningEnabled: true

  # ses configuration set
  SESConfigurationSetResource:
    Type: AWS::SES::ConfigurationSet
    Properties:
      Name: !Ref SESConfigurationSet
      DeliveryOptions:
        TlsPolicy: REQUIRE
      ReputationOptions:
        ReputationMetricsEnabled: true
      SendingOptions:
        SendingEnabled: true
  
  # ses event destination configuration
  SESEventDestination:
    Type: AWS::SES::ConfigurationSetEventDestination
    Condition: CreateConfigSet
    DependsOn: SESConfigurationSetResource
    Properties:
      ConfigurationSetName: !Ref SESConfigurationSet
      EventDestination:
        Name: "EmailEventLogging"
        Enabled: true
        # logs all email events in cloudwatch
        MatchingEventTypes:
          - "send"
          - "reject"
          - "bounce"
          - "complaint"
          - "delivery"
        CloudWatchDestination:
          DimensionConfigurations:
            - DimensionName: "Source"
              DimensionValueSource: "messageTag"
              DefaultDimensionValue: "Unknown"

######################################################
# Functions
######################################################

  # Email Verification Function
  email:
    Type: AWS::Serverless::Function
    # depends on the private subnets and nat gateway
    DependsOn:
      - PrivateSubnet1RouteTableAssociation
      - PrivateSubnet2RouteTableAssociation
      - PrivateSubnet3RouteTableAssociation
      - NatGateway
    Properties:
      CodeUri: email/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      # all endpoints in email service
      Events:
        sendEmail:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /sendEmail
            Method: post
            # if no authorization is specified, uses Cognito Authorizer
        sendEmailOptions:
        # each endpoint has an options method that matches every path
        # this is used for CORS configuration
        # all options methods have no authorization
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /sendEmail
            Method: options
            # uses no authorization
            Auth:
              Authorizer: NONE
        sendPassVerificationEmail:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /passVerificationEmail
            Method: post
        sendPassVerificationEmailOptions:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /passVerificationEmail
            Method: options
            Auth:
              Authorizer: NONE

# Token Cleanup Function
  TokenCleanupFunction:
      Type: AWS::Serverless::Function
      DependsOn:
        - PrivateSubnet1RouteTableAssociation
        - PrivateSubnet2RouteTableAssociation
        - PrivateSubnet3RouteTableAssociation
        - NatGateway
      Properties:
        CodeUri: cleanup/
        Handler: app.lambda_handler
        Role: !GetAtt LambdaExecutionRole.Arn
        Events:
          # function is scheduled to run daily
          # cleans expired tokens stored in the database
          ScheduledCleanup:
            Type: Schedule
            Properties:
              Schedule: rate(1 day)
              Name: TokenCleanupSchedule
              Description: Daily cleanup of expired tokens
              Enabled: true

##########################################

  usersByCognito:
    Type: AWS::Serverless::Function
    DependsOn:
      - PrivateSubnet1RouteTableAssociation
      - PrivateSubnet2RouteTableAssociation
      - PrivateSubnet3RouteTableAssociation
      - NatGateway
    Properties:
      CodeUri: users_by_cognito/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        # get user by cognito id
        getUserByCognitoId:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /users/cognito/{cognitoId}
            Method: get
        # options method for get user by cognito id
        cognitoIdOptions:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /users/cognito/{cognitoId}
            Method: options
            Auth:
              Authorizer: NONE

  logIn:
    Type: AWS::Serverless::Function
    DependsOn:
      - PrivateSubnet1RouteTableAssociation
      - PrivateSubnet2RouteTableAssociation
      - PrivateSubnet3RouteTableAssociation
      - NatGateway
    Properties:
      CodeUri: login/
      Handler: app.login_handler
      Role: !GetAtt LambdaExecutionRole.Arn 
      Events:
        logIn:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /login
            Method: post
            Auth:
              Authorizer: NONE
        logInOptions:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /login
            Method: options
            Auth:
              Authorizer: NONE

  logOut:
    Type: AWS::Serverless::Function
    DependsOn:
      - PrivateSubnet1RouteTableAssociation
      - PrivateSubnet2RouteTableAssociation
      - PrivateSubnet3RouteTableAssociation
      - NatGateway
    Properties:
      CodeUri: logout/
      Handler: app.logout_handler
      Role: !GetAtt LambdaExecutionRole.Arn 
      Events:
        logOut:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /logout
            Method: post
        logOutOptions:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /logout
            Method: options
            Auth:
              Authorizer: NONE

  users:
    Type: AWS::Serverless::Function
    DependsOn:
      - PrivateSubnet1RouteTableAssociation
      - PrivateSubnet2RouteTableAssociation
      - PrivateSubnet3RouteTableAssociation
      - NatGateway
    Properties:
      CodeUri: users/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn 
      Events:
        # can never have more than one route with the same path and method
        registerUser:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /users
            Method: post
            Auth:
              Authorizer: NONE
        registerUserOptions:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /users
            Method: options
            Auth:
              Authorizer: NONE
        getUser:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /users/{userId}
            Method: get
        updateUser:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /users/{userId}
            Method: put
        deleteUser:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /users/{userId}
            Method: delete
        userOptions:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /users/{userId}
            Method: options
            Auth:
              Authorizer: NONE
        resetUserPassword:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /users/resetPassword/{userId}
            Method: put
        resetUserPasswordOptions:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /users/resetPassword/{userId}
            Method: options
            Auth:
              Authorizer: NONE
        getUserByEmail:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /users/byEmail
            Method: post
        getUserByEmailOptions:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /users/byEmail
            Method: options 
            Auth:
              Authorizer: NONE

  AICustoms:
    Type: AWS::Serverless::Function
    DependsOn:
      - PrivateSubnet1RouteTableAssociation
      - PrivateSubnet2RouteTableAssociation
      - PrivateSubnet3RouteTableAssociation
      - NatGateway
    Properties:
      CodeUri: ai_customs/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn 
      Events:
        setCustoms:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /customs
            Method: post
        getCustoms:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /customs
            Method: get
        updateCustoms:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /customs
            Method: put
        deleteCustoms:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /customs
            Method: delete
        customsOptions:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /customs
            Method: options
            Auth:
              Authorizer: NONE

  files:
    Type: AWS::Serverless::Function
    DependsOn:
      - PrivateSubnet1RouteTableAssociation
      - PrivateSubnet2RouteTableAssociation
      - PrivateSubnet3RouteTableAssociation
      - NatGateway
    Properties:
      CodeUri: files/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn 
      Events:
        uploadFile:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /files
            Method: post
        uploadFileOptions:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /files
            Method: options
            Auth:
              Authorizer: NONE
        getFile:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /files/{fileId}
            Method: get
        deleteFile:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /files/{fileId}
            Method: delete
        fileOptions:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /files/{fileId}
            Method: options
            Auth:
              Authorizer: NONE

  scrapedFiles:
    Type: AWS::Serverless::Function
    DependsOn:
      - PrivateSubnet1RouteTableAssociation
      - PrivateSubnet2RouteTableAssociation
      - PrivateSubnet3RouteTableAssociation
      - NatGateway
    Properties:
      CodeUri: scrapedFiles/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn 
      Events:
        uploadFile:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /scrapedFiles
            Method: post
        uploadFileOptions:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /scrapedFiles
            Method: options
            Auth:
              Authorizer: NONE
        getFile:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /scrapedFiles/{fileId}
            Method: get
        deleteFile:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /scrapedFiles/{fileId}
            Method: delete
        fileOptions:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /scrapedFiles/{fileId}
            Method: options
            Auth:
              Authorizer: NONE

  schoolContact:
    Type: AWS::Serverless::Function
    DependsOn:
      - PrivateSubnet1RouteTableAssociation
      - PrivateSubnet2RouteTableAssociation
      - PrivateSubnet3RouteTableAssociation
      - NatGateway
    Properties:
      CodeUri: school_contact/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn 
      Events:
        createContact:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /contact
            Method: post
        createContactOptions:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /contact
            Method: options
            Auth:
              Authorizer: NONE
        getContact:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /contact/{contactId}
            Method: get
        updateContact:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /contact/{contactId}
            Method: put
        deleteContact:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /contact/{contactId}
            Method: delete
        contactOptions:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /contact/{contactId}
            Method: options
            Auth:
              Authorizer: NONE

  events:
    Type: AWS::Serverless::Function
    DependsOn:
      - PrivateSubnet1RouteTableAssociation
      - PrivateSubnet2RouteTableAssociation
      - PrivateSubnet3RouteTableAssociation
      - NatGateway
    Properties:
      CodeUri: sftEvents/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn 
      Events:
        scheduleEvent:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /sftEvents
            Method: post
        scheduleEventOptions:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /sftEvents
            Method: options
            Auth:
              Authorizer: NONE
        getEventById:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /sftEvents/{eventId}
            Method: get
        getEvents:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /sftEvents
            Method: get
        updateEvent:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /sftEvents/{eventId}
            Method: put
        deleteEvent:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /sftEvents/{eventId}
            Method: delete
        eventOptions:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /sftEvents/{eventId}
            Method: options
            Auth:
              Authorizer: NONE

  conversationLogs:
    Type: AWS::Serverless::Function
    DependsOn:
      - PrivateSubnet1RouteTableAssociation
      - PrivateSubnet2RouteTableAssociation
      - PrivateSubnet3RouteTableAssociation
      - NatGateway
    Properties:
      CodeUri: conversation_logs/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn 
      Events:
        logConversation:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /conversation_logs
            Method: post
        logConversationOptions:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /conversation_logs
            Method: options
            Auth:
              Authorizer: NONE
        getConversationLogs:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /conversation_logs/{userId}
            Method: get
        conversationLogsOptions:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /conversation_logs/{userId}
            Method: options
            Auth:
              Authorizer: NONE

  analytics:
    Type: AWS::Serverless::Function
    DependsOn:
      - PrivateSubnet1RouteTableAssociation
      - PrivateSubnet2RouteTableAssociation
      - PrivateSubnet3RouteTableAssociation
      - NatGateway
    Properties:
      CodeUri: analytics/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn 
      Events:
        logMetric:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /analytics
            Method: post
        logMetricOptions:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /analytics
            Method: options
            Auth:
              Authorizer: NONE
        getAnalytics:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /analytics/{metricId}
            Method: get
        analyticsOptions:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /analytics/{metricId}
            Method: options
            Auth:
              Authorizer: NONE

  admins:
    Type: AWS::Serverless::Function
    DependsOn:
      - PrivateSubnet1RouteTableAssociation
      - PrivateSubnet2RouteTableAssociation
      - PrivateSubnet3RouteTableAssociation
      - NatGateway
    Properties:
      CodeUri: admins/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn 
      Events:
        createAdmin:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /admins
            Method: post
        userRoleOptions:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /admins
            Method: options
            Auth:
              Authorizer: NONE
        updateUserRole:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /admins
            Method: put
        getUserById:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /admins/{userId}
            Method: get
        getUsers:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /admins
            Method: get
        deleteUser:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /admins/{userId}
            Method: delete
        adminOptions:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /admins/{userId}
            Method: options
            Auth:
              Authorizer: NONE
        logAction:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /admins/log
            Method: post
        logActionOptions:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /admins/log
            Method: options
            Auth:
              Authorizer: NONE
        getLogs:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /admins/log/{userId}
            Method: get
        logOptions:
          Type: Api
          Properties:
            RestApiId: !Ref sft
            Path: /admins/log/{userId}
            Method: options
            Auth:
              Authorizer: NONE

  # Application Insights Resource Group
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0

  # Application Insights Monitoring
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'

# outputs for the stack
# all outputs are exported for use in other stacks
# all outputs need a value, description preferred
Outputs:
  sftMadnessApi:
    Description: "API Gateway endpoint URL for Prod stage for sftMadness functions"
    Value: 
      Fn::Sub: "https://${sft}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
    Export:
      Name: !Sub "${AWS::StackName}-ApiEndpoint"
  ServerlessRestApiId:
    Description: "API Gateway REST API ID"
    Value: !Ref sft
    Export:
      Name: !Sub "${AWS::StackName}-RestApiId"
  ServerlessRestApiRootResourceId:
    Description: "API Gateway REST API root resource ID"
    Value: !GetAtt sft.RootResourceId
    Export:
      Name: !Sub "${AWS::StackName}-RootResourceId"
  FileStorageBucketName:
    Description: "Name of the S3 bucket for file storage"
    Value: !Ref FileStorageBucket
    Export:
      Name: !Sub "${AWS::StackName}-BucketName"
  ScrapedFileStorageBucketName:
    Description: "Name of the S3 bucket for scraped file storage"
    Value: !Ref ScrapedFileStorageBucket
    Export:
      Name: !Sub "${AWS::StackName}-ScrapedBucketName"
  EmailLogGroupName:
    Description: CloudWatch Log Group for Email Events
    Value: !Ref EmailLoggingGroup
  EmailMetricsRoleArn:
    Description: IAM Role ARN for Email Metrics
    Value: !GetAtt EmailMetricsRole.Arn
  SESConfigurationSetName:
    Description: SES Configuration Set Name
    Condition: CreateConfigSet
    Value: !Ref SESConfigurationSet
  SESDomainIdentityName:
    Description: SES Domain Identity
    Condition: VerifyDomain
    Value: !Ref SESDomain
  logInFunctionArn:
    Description: "logIn Lambda Function ARN"
    Value: !GetAtt logIn.Arn
  logOutFunctionArn:
    Description: "logOut Lambda Function ARN"
    Value: !GetAtt logOut.Arn
  usersFunctionArn:
    Description: "users Lambda Function ARN"
    Value: !GetAtt users.Arn
  AICustomsFunctionArn:
    Description: "AICustoms Lambda Function ARN"
    Value: !GetAtt AICustoms.Arn
  filesFunctionArn:
    Description: "files Lambda Function ARN"
    Value: !GetAtt files.Arn
  scrapedFilesFunctionArn:
    Description: "scrapedFiles Lambda Function ARN"
    Value: !GetAtt scrapedFiles.Arn
  schoolContactFunctionArn:
    Description: "schoolContact Lambda Function ARN"
    Value: !GetAtt schoolContact.Arn
  eventsFunctionArn:
    Description: "events Lambda Function ARN"
    Value: !GetAtt events.Arn
  conversationLogsFunctionArn:
    Description: "conversationLogs Lambda Function ARN"
    Value: !GetAtt conversationLogs.Arn
  analyticsFunctionArn:
    Description: "analytics Lambda Function ARN"
    Value: !GetAtt analytics.Arn
  adminsFunctionArn:
    Description: "admins Lambda Function ARN"
    Value: !GetAtt admins.Arn