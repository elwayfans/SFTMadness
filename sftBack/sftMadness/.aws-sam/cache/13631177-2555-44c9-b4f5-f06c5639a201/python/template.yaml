AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sftMadness

  Sample SAM Template for sftMadness

Globals:
  Function:
    Timeout: 15
    Runtime: python3.12
    Architectures:
      - x86_64
    LoggingConfig:
      LogFormat: JSON

    Environment:
      Variables:
        ENV: !Ref Env
        DB_HOST: !Ref DBHost
        DB_USER: !Ref DBUser
        DB_PASSWORD: !Sub '{{resolve:secretsmanager:arn:aws:secretsmanager:us-east-2:908027415563:secret:rds!cluster-0aeebdc5-c3e2-4954-8002-4b8fbaa2cd96-Cxeg0w:SecretString:password}}'
        DB_PORT: !Ref DBPort

    Layers:
      - !Ref DependenciesLayer

    VpcConfig:
      SecurityGroupIds:
        # - sg-09a88e3572f96553e
        - !Ref LambdaSecurityGroup
      SubnetIds:
        - !Select [0, !Split [",", !Ref SubnetIds]]
        - !Select [1, !Split [",", !Ref SubnetIds]]
        - !Select [2, !Split [",", !Ref SubnetIds]]
    

Parameters:
  Env:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Environment
  DBHost:
    Type: String
    Description: Database Host
  DBUser:
    Type: String
    Description: Database User
  DBPort:
    Type: Number
    Description: Database Port
  SubnetIds:
    Type: String
    Description: Subnet Ids

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      #   - PolicyName: SecretsAccess
      #     PolicyDocument:
      #       Version: '2012-10-17'
      #       Statement:
      #         - Effect: Allow
      #           Action:
      #             - secretsmanager:GetSecretValue
      #           Resource: 
      #             - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/gearswap/${ENV}/*'
      #   - PolicyName: SSMAccess
      #     PolicyDocument:
      #       Version: '2012-10-17'
      #       Statement:
      #         - Effect: Allow
      #           Action:
      #             - ssm:GetParameter
      #             - ssm:GetParameters
      #             - ssm:GetParametersByPath
      #           Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/gearswap/${ENV}/*'
        - PolicyName: RDSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds-db:connect
                Resource: '*'

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda functions
      VpcId: vpc-0e7cfddc215e8fab1
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  DependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: sftMadnessDependencies
      Description: Dependencies for sftMadness
      ContentUri: ./
      CompatibleRuntimes:
        - python3.12
    Metadata:
      BuildMethod: python3.12

  logIn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: login/
      Handler: app.lambda_handler
      Events:
        logIn:
          Type: Api
          Properties:
            Path: /login
            Method: post

  logOut:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: logout/
      Handler: app.lambda_handler
      Events:
        logOut:
          Type: Api
          Properties:
            Path: /logout
            Method: post

  users:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: users/
      Handler: app.lambda_handler
      Events:
        registerUser:
          Type: Api
          Properties:
            Path: /users
            Method: post
        getUser:
          Type: Api
          Properties:
            Path: /users/{userId}
            Method: get
        updateUser:
          Type: Api
          Properties:
            Path: /users/{userId}
            Method: put
        deleteUser:
          Type: Api
          Properties:
            Path: /users/{userId}
            Method: delete

  AICustoms:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ai_customs/
      Handler: app.lambda_handler
      Events:
        setCustoms:
          Type: Api
          Properties:
            Path: /customs/{userId}
            Method: post
        getCustoms:
          Type: Api
          Properties:
            Path: /customs/{userId}
            Method: get
        updateCustoms:
          Type: Api
          Properties:
            Path: /customs/{userId}
            Method: put
        deleteCustoms:
          Type: Api
          Properties:
            Path: /customs/{userId}
            Method: delete

  files:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: files/
      Handler: app.lambda_handler
      Events:
        uploadFile:
          Type: Api
          Properties:
            Path: /files
            Method: post
        getFile:
          Type: Api
          Properties:
            Path: /files/{fileId}
            Method: get
        deleteFile:
          Type: Api
          Properties:
            Path: /files/{fileId}
            Method: delete

  schoolContact:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: school_contact/
      Handler: app.lambda_handler
      Events:
        createContact:
          Type: Api
          Properties:
            Path: /contact
            Method: post
        getContact:
          Type: Api
          Properties:
            Path: /contact/{contactId}
            Method: get
        updateContact:
          Type: Api
          Properties:
            Path: /contact/{contactId}
            Method: put
        deleteContact:
          Type: Api
          Properties:
            Path: /contact/{contactId}
            Method: delete

  events:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: sftEvents/
      Handler: app.lambda_handler
      Events:
        scheduleEvent:
          Type: Api
          Properties:
            Path: /sftEvents
            Method: post
        getEventById:
          Type: Api
          Properties:
            Path: /sftEvents/{eventId}
            Method: get
        getEvents:
          Type: Api
          Properties:
            Path: /sftEvents
            Method: get
        updateEvent:
          Type: Api
          Properties:
            Path: /sftEvents/{eventId}
            Method: put
        deleteEvent:
          Type: Api
          Properties:
            Path: /sftEvents/{eventId}
            Method: delete

  conversationLogs:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: conversation_logs/
      Handler: app.lambda_handler
      Events:
        logConversation:
          Type: Api
          Properties:
            Path: /conversation_logs
            Method: post
        getConversationLogs:
          Type: Api
          Properties:
            Path: /conversation_logs/{userId}
            Method: get

  analytics:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: analytics/
      Handler: app.lambda_handler
      Events:
        logMetric:
          Type: Api
          Properties:
            Path: /analytics
            Method: post
        getAnalytics:
          Type: Api
          Properties:
            Path: /analytics/{metricId}
            Method: get

  admins:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: admins/
      Handler: app.lambda_handler
      Events:
        createAdmin:
          Type: Api
          Properties:
            Path: /admins
            Method: post
        getUserById:
          Type: Api
          Properties:
            Path: /admins/{userId}
            Method: get
        getUsers:
          Type: Api
          Properties:
            Path: /admins
            Method: get
        deleteUser:
          Type: Api
          Properties:
            Path: /admins/{userId}
            Method: delete
        logAction:
          Type: Api
          Properties:
            Path: /admins/log
            Method: post
        getLogs:
          Type: Api
          Properties:
            Path: /admins/log/{userId}
            Method: get

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'

Outputs:
  SftApi:
    Description: "API Gateway endpoint URL for Prod stage for sftMadness functions"
    Value: 
      Fn::Sub: "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
    Export:
      Name: !Sub "${AWS::StackName}-ApiEndpoint"
  
  ServerlessRestApiId:
    Description: "API Gateway REST API ID"
    Value: !Ref ServerlessRestApi
    Export:
      Name: !Sub "${AWS::StackName}-RestApiId"

  ServerlessRestApiRootResourceId:
    Description: "API Gateway REST API root resource ID"
    Value: !GetAtt ServerlessRestApi.RootResourceId
    Export:
      Name: !Sub "${AWS::StackName}-RootResourceId"